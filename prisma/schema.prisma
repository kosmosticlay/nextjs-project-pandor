// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  email      String?   @unique
  avatar     String?   @default("/default-avatar.png")
  bio        String?
  password   String?
  phone      String?   @unique
  github_id  String?   @unique
  google_id  String?   @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  posts      Post[]
  comments   Comment[]
  likes      Like[]
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  price       Float
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
  photo       String?   @default("/No-Image-Placeholder.png")

  @@index([userId]) // 사용자가 작성한 Tweet 리스트 전체 검색을 위한 인덱스
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
}

model Like {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int

  @@unique([userId, postId]) // 한 사용자가 동일한 Post에 중복으로 좋아요를 누르는 것을 방지하기 위한 유니크 제약; 즉 Like 테이블에서 두 조합이 유일해야 함
  @@index([userId]) // 사용자가 좋아요한 Tweet 리스트 전체 검색을 위한 인덱스
  @@index([postId]) // 특정 Post에 좋아요를 누른 사용자 리스트 전체 검색을 위한 인덱스
}
